" ShaoZhengjiang's vimrc.

" Basic settings.
syntax on
set showcmd
set laststatus=1
set foldenable
set foldmethod=manual
set nocompatible
set number
if version >= 603
    set helplang=cn
    set encoding=utf-8
endif
set fileformat=unix
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set cindent
set tabstop=4
set shiftwidth=4
set expandtab
set showmatch
set cursorline
set cc=80
set foldmethod=marker
set hlsearch
" Basic set 
let g:vimrc_author='Maoyanjun' 
let g:vimrc_email='maoyanjun_dut@foxmail.com' 
let g:vimrc_homepage='http://maoyanjun.top' 
inoremap jk <Esc>
let mapleader="s"
vnoremap <leader>y "+y 
nnoremap <leader>p "+gp 
iab xdt <c-r>=strftime("=======20%y.%m.%d.%H:%M(%A)=======")<cr>
" Auto add head info
" .py file into add header
function HeaderPython()
    call setline('.', "#!/usr/bin/env python")
    normal o
    call setline('.', "# -*- coding: utf-8 -*-")
    normal o
    call setline('.', '"""')
    normal o
    call setline('.', "    Date: ".strftime("%Y-%m-%d"))
    normal o
    call setline('.', "    Author: ".g:vimrc_author)
    normal o
    call setline('.', "    Email: ".g:vimrc_email)
    normal o
    call setline('.', "    HomePage: ".g:vimrc_homepage)
    normal o
    call setline('.',"    LastChange: ".strftime("%Y-%m-%d %H:%M:%S"))
    normal o
    call setline('.',"    History:")
    normal o
    call setline('.', "    Discription: ")
    normal o
    call setline('.', "    Copyright: GNU General Public License")
    normal o
    call setline('.', '"""')
    normal G
    normal o
endf
autocmd bufnewfile *.py call HeaderPython()
" use <F6> add the author information for py file
nmap <F6> :call HeaderPython()<CR> 
" .sh file
function HeaderBash()
    call setline(1, "#!/usr/bin/env bash")
    normal G
    normal o
endf
autocmd bufnewfile *.sh call HeaderBash()

" Vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugins.
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'dyng/ctrlsf.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'MattesGroeger/vim-bookmarks'
Plugin 'vim-syntastic/syntastic'
Plugin 'auto-pairs'
"Plugin 'suan/vim-instant-markdown'
"Plugin 'rizzatti/dash.vim'

call vundle#end()
filetype plugin indent on

" Plugin nerdtree settings.
map <F2> :NERDTreeToggle<CR>
let NERDTreeChDirMode=1
let NERDTreeShowBookmarks=1
let NERDTreeWinSize=25
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '\.git$']

" Plugin tagbar settings.
"map <F2> :TagbarToggle<CR> 
nmap tb :TagbarToggle<CR> 
let g:tagbar_width =40
let g:tagbar_autofocus =1
let g:tagbar_sort =0
"let g:tagbar_autopreview =1

"Plugin miniBufExpl 
" 不知道如何用let g:miniBufExplMapWindowNavVim = 1


" Pluging ctrlp settings.
map <F3> :CtrlP<CR>

" Plugin ctrlsf settings.
map <F4> <Plug>CtrlSF

" Plugin indentLine settings.
let g:indentLine_char = "┆"
let g:indentLine_enabled = 1
let g:autopep8_disable_show_diff=1

"" Plugin airline settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="luna"

" Plugin YCM settings.
set completeopt=longest,menu
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_cache_omnifunc=0
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
 
" disable ycm check and highlight for c or cpp file
let g:ycm_show_diagnostics_ui = 0

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_auto_loc_list =1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_signs=1
let g:syntastic_aggregate_errors = 0
let g:syntastic_cpp_check_header = 0
let g:syntastic_cpp_remove_include_errors = 0

" molokai theme
"colorscheme molokai
"let g:molokai_original = 1
"let g:rehash256 = 1

" solarized colorscheme
"syntax enable
"set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized

"colorscheme desert

" Plugin vim-bookmarks settings.
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=194 ctermfg=NONE

" Plugin syntastic settings.
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" set A.vim 
nnoremap <silent> <F12> :A<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {'mode': 'passive', 'active_filetypes': [], 'passive_filetypes': []}
" Use pylint to check python files.
let g:syntastic_python_checkers = ['pylint']
map <F5> :SyntasticToggleMode<CR> :SyntasticCheck<CR>

" Ignore warnings about newlines trailing.
let g:syntastic_quiet_messages = { 'regex': ['trailing-newlines', 'invalid-name',
    \'too-many-lines', 'too-many-instance-attributes', 'too-many-public-methods',
    \'too-many-locals', 'too-many-branches'] }


"- vim Extension OpenFOAM
filetype plugin indent on
:let g:foam256_use_custom_colors=1
:set t_Co=256

" execute project related configuration in current directory
if filereadable("workspace.vim")
    source workspace.vim
endif 
" set OpenFOAM tags 
set tags=tags,/home/shzx/myj/OpenFOAMsourcefile/Tags/tags

" set folde set
set foldenable              " 开始折叠
set foldmethod=syntax       " 设置语法折叠
set foldcolumn=0            " 设置折叠区域的宽度
setlocal foldlevel=1        " 设置折叠层数为
set foldlevelstart=99       " 打开文件是默认不折叠代码
